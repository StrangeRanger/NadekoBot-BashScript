#!/bin/bash
#
# The main installer for Linux.
#
# Comment Key:
#   - A.1.: Return to prevent further code execution.
#   - B.1.: Prevent the code from running if the option is disabled.
#
########################################################################################
####[ Variables ]#######################################################################


## To be exported.
E_SERVICE_NAME="nadeko.service"
E_SERVICE="/etc/systemd/system/$E_SERVICE_NAME"

readonly C_REQ_DOTNET_VERSION=6


####[ Functions ]#######################################################################


####
# Depending on the return/exit code from any of the executed scripts, perform the
# corresponding/appropriate actions.
#
# Custom Exit Codes:
#   - 3: Related to NadekoBot daemon service.
#   - 4: Unsupported OS/Distro.
#   - 5: A problem occurred finalizing an installation or the backup of files.
#   - 50: Arbitrary exit code telling the main installer to continue running.
#
# PARAMETERS:
#   - $1: exit_code (Required)
exit_code_actions() {
    local exit_code="$1"

    ## We don't specify any output for SIGINT because it's handled by 'installer-prep'.
    ## As a note, SIGHUP and SIGTERM don't propagate to parent processes, so we also
    ## specify the output for those signals in 'installer-prep'.
    case "$exit_code" in
        3|4|5|50) return 0 ;;
        129) echo -e "\n${E_WARNING}Hangup signal detected (SIGHUP)" ;;
        130) ;;
        143) echo -e "\n${E_WARNING}Termination signal detected (SIGTERM)" ;;
    esac

    exit "$exit_code"
}

####
# Provide the reason(s) for why one or more options are disabled.
disabled_reasons() {
    echo "${E_CYAN}Reasons for the disabled option:"

    if (! hash dotnet \
        || ! hash redis-server \
        || (! hash python && (! hash python3 && ! hash python-is-python3)) \
        || ! "$ccze_installed" \
        || [[ ${dotnet_version:-false} != "$C_REQ_DOTNET_VERSION" ]]) &>/dev/null
    then
        echo "  One or more prerequisites are not installed"
        echo "    Use option 6 to install them all"
    fi

    if [[ -d nadekobot ]]; then
        if [[ ! -f nadekobot/output/creds.yml ]]; then
            echo "  The 'creds.yml' could not be found"
            echo "    Refer to the following link for help: https://nadekobot.readthedocs.io/en/latest/creds-guide/"
        fi
    else
        echo "  NadekoBot could not be found"
        echo "    Use option 1 to download NadekoBot"
    fi

    echo "$E_NC"
}

###
### [ Functions To Be Exported ]
###

####
# Store the status of NadekoBot's service, inside of $E_SERVICE_STATUS.
E_GET_SERVICE_STATUS() {
    E_SERVICE_STATUS=$(systemctl is-active "$E_SERVICE_NAME")
}

########
# Stops NadekoBot's service.
#
# PARAMETERS:
#   - $1: output_text (Optional, Default: false)
#       - True when the function should output text indicating if the service has been
#         stopped or is currently not running.
#
# RETURNS:
#   - 1: If $E_SERVICE_NAME is not currently running.
E_STOP_SERVICE() {
    local output_text="${1:-false}"

    if [[ $E_SERVICE_STATUS == "active" ]]; then
        echo "Stopping '$E_SERVICE_NAME'..."
        sudo systemctl stop "$E_SERVICE_NAME" || {
            echo "${E_ERROR}Failed to stop '$E_SERVICE_NAME'" >&2
            echo "${E_CYAN}You will need to restart '$E_SERVICE_NAME' to apply any" \
                "updates to NadekoBot${E_NC}"
            return 1
        }
        [[ $output_text == true ]] \
            && echo -e "\n${E_GREEN}NadekoBot has been stopped${E_NC}"
    else
        [[ $output_text == true ]] \
            && echo -e "\n${E_CYAN}NadekoBot is not currently running${E_NC}"
    fi
}

########
# Display the logs from 'nadeko.server' as they are created.
E_FOLLOW_SERVICE_LOGS() {
    (
        trap 'exit 130' SIGINT
        sudo journalctl --no-hostname -f -u "$E_SERVICE_NAME"  | ccze -A
    )
}

########
# Output additional information to go along with the output of the function
# 'E_FOLLOW_SERVICE_LOGS'.
#
# PARAMETERS:
#   - $1: log_type (Required)
#       - Indicates if the function was called from one of the runner scripts or from
#         within the main installer.
#       - Acceptable values:
#           - "runner": Called from one of the runner scripts.
#           - "opt_five": Called from the main installer.
E_WATCH_SERVICE_LOGS() {
    local log_type="$1"

    if [[ $log_type == "runner" ]]; then
        echo "Displaying '$E_SERVICE_NAME' startup logs, live..."
    elif [[ $log_type == "opt_five" ]]; then
        echo "Watching '$E_SERVICE_NAME' logs, live..."
    else
        E_STDERR "INTERNAL ERROR: Invalid argument for 'E_WATCH_SERVICE_LOGS': $1" "4"
    fi

    echo "${E_CYAN}To stop displaying the startup logs:"
    echo "1) Press 'Ctrl' + 'C'${E_NC}"
    echo ""

    E_FOLLOW_SERVICE_LOGS

    [[ $1 == "runner" ]] && echo -e "\nPlease check the logs above to make sure that" \
        "there aren't any errors, and if there are, to resolve whatever issue is" \
        "causing them"

    read -rp "Press [Enter] to return to the installer menu"
}


####[ Trapping Logic ]##################################################################


trap 'exit_code_actions "129"' SIGHUP
trap 'exit_code_actions "143"' SIGTERM


####[ Main ]############################################################################


printf "%sWelcome to the NadekoBot installer menu\n\n" "$E_CLRLN"

while true; do
    ###
    ### [ Temporary Variables ]
    ###
    ### The variables below constantly get modified later in the while loop, and are
    ### required to be reset everytime the loop starts back at the top.
    ###

    ## Disabled option text.
    dis_option=" (Execute option to display the reason it's disabled)"
    dis_opt_v2=" (Disabled until NadekoBot is running)"
    ## Option 1.
    opt_one_dis=false
    opt_one_text="1. Download NadekoBot"
    ## Option 2 & 3.
    opt_two_and_three_dis=false
    opt_two_text="2. Run NadekoBot in the background"
    opt_three_text="3. Run NadekoBot in the background with auto restart"
    ## Option 5.
    opt_five_dis=false
    opt_five_text="5. Display '$E_SERVICE_NAME' logs in follow mode"
    ## Option 7.
    opt_seven_dis=false
    opt_seven_text="7. Back up important files"

    ###
    ### [ Variable Checks ]
    ###
    ### The following variables re-check the status, existence, etc., of some service
    ### or program, that has the possibility of changing every time the while loop runs.
    ###

    if hash dotnet &>/dev/null; then
        dotnet_version=$(dotnet --version)     # Version: x.x.x
        dotnet_version=${dotnet_version//.*/}  # Version: x
    fi

    ###
    ### [ Main Continued ]
    ###

    E_GET_SERVICE_STATUS

    if hash ccze &>/dev/null; then
        ccze_installed=true
    else
        ccze_installed=false
    fi

    ## Disable option 1 if any of the following tools are not installed.
    if (! hash dotnet \
        || ! hash redis-server \
        || ! hash python3 \
        || ! "$ccze_installed" \
        || [[ ${dotnet_version:-false} != "$C_REQ_DOTNET_VERSION" ]]) &>/dev/null
    then
        opt_one_dis=true
        opt_one_text="${E_GREY}${opt_one_text}${dis_option}${E_NC}"
    fi

    ## Disable options 2, 3, and 5 if any of the tools in the previous if statement are
    ## not installed, or none of the specified directories/files could be found.
    if "$opt_one_dis" || [[ ! -f nadekobot/output/creds.yml ]]; then
        opt_two_and_three_dis=true
        opt_two_text="${E_GREY}${opt_two_text}${dis_option}${E_NC}"
        opt_three_text="${E_GREY}${opt_three_text}${dis_option}${E_NC}"
        opt_five_dis=true
        opt_five_text="${E_GREY}${opt_five_text}${dis_opt_v2}${E_NC}"

        if [[ ! -d nadekobot ]]; then
            opt_seven_dis=true
            opt_seven_text="${E_GREY}${opt_seven_text}${dis_option}${E_NC}"
        fi
    ## Options 2 and 3 remain enabled, if 'NadekoRun' exists.
    elif [[ -f NadekoRun ]]; then
        ## Option 5 remains enabled, if NadekoBot's service is running.
        if [[ $E_SERVICE_STATUS == "active" ]]; then
            run_mode_status=" ${E_GREEN}(Running in this mode)${E_NC}"
        ## Disable option 5 if NadekoBot's service NOT running.
        elif [[ $E_SERVICE_STATUS == "inactive" ]]; then
            opt_five_dis=true
            opt_five_text="${E_GREY}${opt_five_text}${dis_opt_v2}${E_NC}"
            run_mode_status=" ${E_YELLOW}(Set up to run in this mode)${E_NC}"
        ## Disable option 5.
        else
            opt_five_dis=true
            opt_five_text="${E_GREY}${opt_five_text}${dis_opt_v2}${E_NC}"
            run_mode_status=" ${E_YELLOW}(Status unknown)${E_NC}"
        fi

        ## If NadekoBot is running in the background with auto restart...
        if grep -q '_code_name_="NadekoRunAR"' NadekoRun; then
            opt_three_text="${opt_three_text}${run_mode_status}"
        ## If NadekoBot is running in the background...
        elif grep -q '_code_name_="NadekoRun"' NadekoRun; then
            opt_two_text="${opt_two_text}${run_mode_status}"
        fi
    ## Options 2 and 3 remained enabled, but option 5 becomes disabled.
    else
        opt_five_dis=true
        opt_five_text="${E_GREY}${opt_five_text}${dis_opt_v2}${E_NC}"
    fi

    echo "$opt_one_text"
    echo "$opt_two_text"
    echo "$opt_three_text"
    echo "4. Stop NadekoBot"
    echo "$opt_five_text"
    echo "6. Install prerequisites"
    echo "$opt_seven_text"
    echo "8. Exit"
    read -r choice
    case "$choice" in
        1)
            ## B.1.
            if "$opt_one_dis"; then
                clear -x
                echo "${E_ERROR}Option 1 is currently disabled${E_NC}"
                disabled_reasons
                continue
            fi

            export E_SERVICE
            export -f E_STOP_SERVICE
            export E_SERVICE_NAME
            export E_SERVICE_STATUS

            E_DOWNLOAD_SCRIPT "nadeko-latest-installer" "true"
            clear -x
            ./nadeko-latest-installer || exit_code_actions "$?"
            clear -x
            ;;
        2|3)
            ## B.1.
            if "$opt_two_and_three_dis"; then
                clear -x
                echo "${E_ERROR}Option $choice is currently disabled${E_NC}"
                disabled_reasons
                continue
            fi

            export E_SERVICE
            export E_SERVICE_NAME
            export E_SERVICE_STATUS
            export -f E_WATCH_SERVICE_LOGS
            export -f E_FOLLOW_SERVICE_LOGS

            E_DOWNLOAD_SCRIPT "nadeko-runner"
            clear -x

            # If option 2 was executed...
            if [[ $choice == 2 ]]; then
                export E_CODENAME="NadekoRun"
                printf "We will now run NadekoBot in the background. "
            # If option 3 was executed...
            else
                export E_CODENAME="NadekoRunAR"
                printf "We will now run NadekoBot in the background with auto restart. "
            fi

            read -rp "Press [Enter] to begin."
            ./nadeko-runner || exit_code_actions "$?"
            clear -x
            ;;
        4)
            clear -x
            read -rp "We will now stop NadekoBot. Press [Enter] to begin."
            E_STOP_SERVICE "true"
            read -rp "Press [Enter] to return to the installer menu"
            clear -x
            ;;
        5)
            clear -x
            ## B.1.
            if "$opt_five_dis"; then
                echo "${E_ERROR}Option 5 is currently disabled${E_NC}"
                echo ""
                continue
            fi

            E_WATCH_SERVICE_LOGS "opt_five"
            clear -x
            ;;
        6)
            E_DOWNLOAD_SCRIPT "prereqs-installer"
            clear -x
            ./prereqs-installer || exit_code_actions "$?"
            clear -x
            ;;
        7)
            ## B.1.
            if "$opt_seven_dis"; then
                clear -x
                echo "${E_ERROR}Option 7 is currently disabled${E_NC}"
                disabled_reasons
                continue
            fi

            E_DOWNLOAD_SCRIPT "file-backup"
            clear -x
            ./file-backup || exit_code_actions "$?"
            clear -x
            ;;
        8)
            exit_code_actions "0"
            ;;
        *)
            clear -x
            echo "${E_ERROR}Invalid input: '$choice' is not a valid option${E_NC}" >&2
            echo ""
            ;;
    esac
done
