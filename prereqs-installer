#!/bin/bash
#
# Install the prerequisites required by NadekoBot on Linux distributions.
#
########################################################################################
####[ Global Variables ]################################################################


readonly C_REQ_DOTNET_PKG="dotnet-sdk-6.0"
readonly C_MUSIC_PREREQS=("libopus0" "opus-tools" "libopus-dev" "libsodium-dev")
readonly C_OTHER_PREREQS=("redis-server" "git" "ccze" "apt-transport-https" "ffmpeg" "python3")
readonly C_YT_DL_URL="https://yt-dl.org/downloads/latest/youtube-dl"
readonly C_YT_DL_PATH="/usr/local/bin/youtube-dl"

readonly C_PREF_DOTNET_INSTALL="Explanation: https://github.com/dotnet/core/issues/7699
Package: *
Pin: origin \"packages.microsoft.com\"
Pin-Priority: 1001"
readonly C_PREF_FILE="/etc/apt/preferences.d/custom-dotnet.pref"


####[ Functions ]#######################################################################


####
# Cleanly exit the script by killing the 'apt' process, if it's running, and displaying
# a message indicating the reason for the exit.
#
# PARAMETERS:
#   - $1: exit_code (Required)
clean_exit() {
    local exit_code="$1"

    trap - EXIT SIGINT SIGTERM SIGHUP
    echo ""

    ## The exit code may be modified to 50, when 'nadeko-latest-installer' should
    ## continue running, even if an error occurred. Please refer to the
    ## 'exit_code_actions' function in 'nadeko-latest-installer' for more information.
    case "$exit_code" in
        1|100) exit_code=50 ;;  # 100 is an error code produced by 'apt'...
        0|5)   ;;
        130)
            echo -e "\n${E_WARNING}User interrupt detected (SIGINT)"
            exit_code=50
            ;;
        143) echo -e "\n${E_WARNING}Termination signal detected (SIGTERM)" ;;
        129) echo -e "\n${E_WARNING}Hangup signal detected (SIGHUP)" ;;
        *)   echo -e "\n${E_WARNING}Exiting with exit code: $exit_code" ;;
    esac

    if [[ $apt_pid ]]; then
        echo "${E_INFO}Cleaning up..."
        sudo kill "$apt_pid" &>/dev/null
    fi

    read -rp "${E_NOTE}Press [Enter] to return to the installer menu"
    exit "$exit_code"
}

####
# NEW GLOBALS:
#   - apt_pid: The process ID of the 'apt' process, used to kill the process when the
#     script exits.
#
# PARAMETERS:
# 	- $1: distro_name (Required)
# 	- $2: distro_ver (Required)
#   - $3: python_pkg (Required)
#       - Python package to install, for 'youtube-dl'.
#       - Acceptable values:
#           - python
#           - python-is-python3
#   - $4: dotnet_pref (Optional, Default: false)
#       - Whether to set the preferred .NET Core installation method.
#       - Acceptable values:
#           - true
#           - false
install_prereqs() {
    local distro_name="$1"
    local distro_ver="$2"
    local python_pkg="$3"
    local dotnet_pref="${4:-false}"

    echo "${E_INFO}Installing .NET Core..."
    ## Microsoft package signing key.
    curl -O https://packages.microsoft.com/config/"$distro_name"/"$distro_ver"/packages-microsoft-prod.deb
    sudo dpkg -i packages-microsoft-prod.deb
    sudo rm -f packages-microsoft-prod.deb

    ## Ensure that .NET SDK is correctly installed on specific versions of Linux.
    if [[ $dotnet_pref == true ]]; then
        if (hash dotnet &>/dev/null && [[ ! $(dotnet --version) ]]) &>/dev/null; then
            echo "${E_WARNING}While the .NET runtime is installed, the .NET SDK is not"
            echo "${E_INFO}Uninstalling existing .NET Core installation..."
            ( sudo apt remove -y "$C_REQ_DOTNET_PKG" && sudo apt autoremove -y ) &
            apt_pid=$!
            wait $apt_pid \
                || E_STDERR "Failed to uninstall existing .NET Core installation" "$?"
            unset apt_pid
        fi

        if [[ ! -f /etc/apt/preferences.d/custom-dotnet.pref ]]; then
            echo "${E_INFO}Updating preferred .NET Core install method..."
            echo "$C_PREF_DOTNET_INSTALL" | sudo tee "$C_PREF_FILE" \
                || E_STDERR "Failed to create '$C_PREF_FILE'" "1"
        else
            echo "${E_NOTE}The preferred .NET Core installation method is already set"
            echo "${E_INFO}Skipping modification of the preferences..."
        fi
    fi

    (
        echo "${E_INFO}Installing .NET Core..."
        sudo apt update && sudo apt install -y "$C_REQ_DOTNET_PKG" || exit $?

        echo "${E_INFO}Installing music prerequisites..."
        sudo apt install -y "${C_MUSIC_PREREQS[@]}" || exit $?

        echo "${E_INFO}Installing other prerequisites..."
        sudo apt install -y "${C_OTHER_PREREQS[@]}" "$python_pkg" || exit $?

        sudo curl -s -L "$C_YT_DL_URL" -o "$C_YT_DL_PATH" || exit 1
        echo "${E_INFO}Modifying permissions for 'youtube-dl'..."
        sudo chmod 755 "$C_YT_DL_PATH" \
            || E_STDERR "Failed to modify permissions as '755' for '$C_YT_DL_PATH'" \
                "" "${E_NOTE}Permission errors may occur when updating 'youtube-dl'"
    ) &
    apt_pid=$!
    wait $apt_pid || E_STDERR "Failed to install all prerequisites" "$?"
    unset apt_pid

    echo -e "\n${E_SUCCESS}Finished installing prerequisites"
    clean_exit 0
}

####
# Display a message indicating that the installer does not support the current OS.
unsupported() {
    echo "${E_ERROR}The installer does not support the automatic installation and" \
        "setup of NadekoBot's prerequisites for your OS: $E_DISTRO $E_VER $E_ARCH"
    read -rp "${E_NOTE}Press [Enter] to return to the installer menu"
    exit 4
}


####[ Trapping Logic ]##################################################################


trap 'clean_exit "130"' SIGINT
trap 'clean_exit "143"' SIGTERM
trap 'clean_exit "129"' SIGHUP
trap 'clean_exit "$?"'  EXIT


####[ Main ]############################################################################


printf "%sWe will now install NadekoBot's prerequisites. " "$E_NOTE"
read -rp "Press [Enter] to continue."

if [[ $E_DISTRO == "ubuntu" ]]; then
    case "$E_VER" in
        22.04) install_prereqs "ubuntu" "$E_VER" "python-is-python3" "true" ;;
        20.04) install_prereqs "ubuntu" "$E_VER" "python-is-python3" ;;
        18.04) install_prereqs "ubuntu" "$E_VER" "python" ;;
        *)     unsupported ;;
    esac
elif [[ $E_DISTRO == "debian" ]]; then
    case "$E_SVER" in
        11) install_prereqs "debian" "$E_SVER" "python-is-python3" ;;
        10) install_prereqs "debian" "$E_SVER" "python" ;;
        *)  unsupported ;;
    esac
elif [[ $E_DISTRO == "linuxmint" ]]; then
    case "$E_SVER" in
        21) install_prereqs "ubuntu" "22.04" "python-is-python3" "true" ;;
        20) install_prereqs "ubuntu" "20.04" "python-is-python3" ;;
        *)  unsupported ;;
    esac
fi
