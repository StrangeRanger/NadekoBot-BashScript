#!/bin/bash
#
# Install the prerequisites required by NadekoBot on Linux distributions.
#
# NOTE:
#   I've run into a few issues with trying to implement trapping that works due to how
#   'apt' and 'dpkg' handle signals. As a result, traps set in 'installer-prep' won't
#   work as expected. When using 'Ctrl+C' to cancel the installation, all it'll do is
#   kill the apt process, and move on to the next step, which is most likely executing
#   the next apt command. This is not ideal, but there isn't much I can do about it
#   right now.
#
########################################################################################
####[ Functions ]#######################################################################


####
# Install all prerequisites.
#
# PARAMETERS:
# 	- $1: distro_name (Required)
# 	- $2: distro_ver (Required)
#   - $3: python_pkg (Required)
#       - Python package to install.
#       - Acceptable values:
#           - python
#           - python-is-python3
#   - $4: dotnet_pref (Optional, Default: false)
#       - Whether to set the preferred .NET Core installation method.
#       - Acceptable values:
#           - true
#           - false
install_prereqs() {
    local distro_name="$1"
    local distro_ver="$2"
    local python_pkg="$3"
    local dotnet_pref="${4:-false}"

    echo "${E_INFO}Installing .NET Core..."
    ## Microsoft package signing key.
    curl -O https://packages.microsoft.com/config/"$distro_name"/"$distro_ver"/packages-microsoft-prod.deb
    sudo dpkg -i packages-microsoft-prod.deb
    sudo rm -f packages-microsoft-prod.deb

    ## Ensure that .NET SDK is correctly installed on specific versions of Linux.
    if [[ $dotnet_pref == true ]]; then
        if (hash dotnet &>/dev/null && [[ ! $(dotnet --version) ]]) &>/dev/null; then
            echo "${E_WARNING}While the .NET runtime is installed, the .NET SDK is not"
            echo "${E_INFO}Uninstalling existing .NET Core installation..."
            sudo apt remove -y dotnet-sdk-6.0
            sudo apt autoremove -y
        fi

        if [[ ! -f /etc/apt/preferences.d/custom-dotnet.pref ]]; then
            echo "${E_INFO}Updating preferred .NET Core install method..."
            echo -e "Explanation: https://github.com/dotnet/core/issues/7699" \
                "\nPackage: *" \
                "\nPin: origin \"packages.microsoft.com\"" \
                "\nPin-Priority: 1001" | sudo tee /etc/apt/preferences.d/custom-dotnet.pref \
                || E_STDERR "Failed to create '/etc/apt/preferences.d/custom-dotnet.pref'" "1"
        else
            echo "${E_WARNING}The preferred .NET Core installation method is already set"
            echo "${E_INFO}Skipping modification of the preferences..."
        fi
    fi

    echo "${E_INFO}Installing .NET Core..."
    sudo apt update && sudo apt install -y dotnet-sdk-6.0

    echo "${E_INFO}Installing music prerequisites..."
    sudo apt install -y libopus0 opus-tools libopus-dev libsodium-dev

    echo "${E_INFO}Installing other prerequisites..."
    sudo apt install -y redis-server git ccze apt-transport-https ffmpeg python3 "$python_pkg"
    sudo curl -s -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
    # If the write perms are not applied to all users for this tool, attempts to update
    # 'youtube-dl' by a non-root user will always fail.
    # TODO: Find a better solution than modifying the perms in such a way that I have.
    sudo chmod a+rwx /usr/local/bin/youtube-dl

}

####
# Display a message indicating that the installer does not support the current OS.
unsupported() {
    echo "${E_ERROR}The installer does not support the automatic installation and" \
        "setup of NadekoBot's prerequisites for your OS: $E_DISTRO $E_VER $E_ARCH"
    read -rp "${E_NOTE}Press [Enter] to return to the installer menu"
    exit 3
}


####[ Main ]############################################################################


printf "%sWe will now install NadekoBot's prerequisites. " "${E_NOTE}"
read -rp "Press [Enter] to continue."

if [[ $E_DISTRO == "ubuntu" ]]; then
    case "$E_VER" in
        22.04) install_prereqs "ubuntu" "$E_VER" "python-is-python3" "true" ;;
        20.04) install_prereqs "ubuntu" "$E_VER" "python-is-python3" ;;
        18.04) install_prereqs "ubuntu" "$E_VER" "python" ;;
        *)     unsupported ;;
    esac
elif [[ $E_DISTRO == "debian" ]]; then
    case "$E_SVER" in
        11) install_prereqs "debian" "$E_SVER" "python-is-python3" ;;
        10) install_prereqs "debian" "$E_SVER" "python" ;;
        *)  unsupported ;;
    esac
elif [[ $E_DISTRO == "linuxmint" ]]; then
    case "$E_SVER" in
        21) install_prereqs "ubuntu" "22.04" "python-is-python3" "true" ;;
        20) install_prereqs "ubuntu" "20.04" "python-is-python3" ;;
        *)  unsupported ;;
    esac
fi

echo -e "\n${E_SUCCESS}Finished installing prerequisites"
read -rp "${E_NOTE}Press [Enter] to return to the installer menu"
