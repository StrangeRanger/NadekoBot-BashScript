#!/bin/bash
#
# Install the prerequisites required by NadekoBot to run on Linux distributions.
#
# Comment Key:
#   - A.1.: Apt has it's own signals handlers, meaning the traps in this script can't
#     catch signals, such as SIGINT, to immediately exit the current action. So the
#     command is run in the background and the process ID is stored in 'apt_pid'. If a
#     signal is caught, the script will kill the 'apt' process and exit.
#
########################################################################################
####[ Global Variables ]################################################################


readonly C_DOTNET_PKG="dotnet-sdk-8.0"
readonly C_MUSIC_PREREQS=("libopus0" "opus-tools" "libopus-dev" "libsodium-dev"
    "python3" "ffmpeg")
readonly C_OTHER_PREREQS=("redis-server" "git" "ccze" "apt-transport-https" "ffmpeg"
    "jq")


####[ Functions ]#######################################################################


####
# Cleanly exit the script by killing the 'apt' process and displaying an appropriate
# message based on the exit code.
#
# PARAMETERS:
#   - $1: exit_code (Required)
#   - $2: use_extra_newline (Optional, Default: false)
#       - Whether to output an extra blank line, to separate the previous output from
#         the output of this function.
#       - Acceptable values:
#           - true
#           - false
#
# EXITS:
#   - $exit_code: Argument provided by the caller, or 50 if the exit code is 1 or 130.
clean_exit() {
    local exit_code="$1"
    local use_extra_newline="${2:-false}"
    local exit_now=false

    trap - EXIT SIGINT
    [[ $use_extra_newline == true ]] && echo ""

    ## The exit code may be modified to 50, when 'nadeko-latest-installer' should
    ## continue running, even if an error occurred. Refer to the 'exit_code_actions'
    ## function in 'nadeko-latest-installer' for more information.
    case "$exit_code" in
        1) exit_code=50 ;;
        0|5) ;;
        129)
            echo -e "\n${E_WARNING}Hangup signal detected (SIGHUP)"
            exit_now=true
            ;;
        130)
            echo -e "\n${E_WARNING}User interrupt detected (SIGINT)"
            exit_code=50
            ;;
        143)
            echo -e "\n${E_WARNING}Termination signal detected (SIGTERM)"
            exit_now=true
            ;;
        *)
            echo -e "\n${E_WARNING}Exiting with exit code: $exit_code"
            exit_now=true
            ;;
    esac

    if [[ $apt_pid ]]; then
        echo "${E_INFO}Cleaning up..."
        sudo kill "$apt_pid" &>/dev/null
    fi

    if [[ $exit_now == false ]]; then
        read -rp "${E_NOTE}Press [Enter] to return to the main menu"
    fi

    exit "$exit_code"
}

####
# Install 'yt-dlp' at '~/.local/bin/yt-dlp'.
#
# EXITS:
#   - 1: Failed to download 'yt-dlp'.
install_yt_dlp() {
    local yt_dlp_url="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp"
    local yt_dpl_dir="${E_YT_DLP_PATH%/*}"

    [[ -d $yt_dpl_dir ]] || mkdir -p "$yt_dpl_dir"

    if [[ ! -f $E_YT_DLP_PATH ]]; then
        echo "${E_INFO}Installing 'yt-dlp'..."
        curl -L "$yt_dlp_url" -o "$E_YT_DLP_PATH" \
            || E_STDERR "Failed to download 'yt-dlp'" "1"
    fi

    echo "${E_INFO}Modifying permissions for 'yt-dlp'..."
    chmod a+rx "$E_YT_DLP_PATH"
}

####
# NEW GLOBALS:
#   - apt_pid: The process ID of the 'apt' process, used to kill the process when the
#     script exits.
#
# PARAMETERS:
# 	- $1: distro_name (Required)
# 	- $2: distro_ver (Required)
#   - $3: ms_repo (Optional, Default: false)
#       - Whether to install .NET from Microsoft's repository.
#       - Acceptable values:
#           - true
#           - false
#
# EXITS:
#   - 0: Successfully installed all prerequisites.
#   - 1: Failed to add Microsoft's package signing key.
#   - $?: Failed to install all prerequisites or remove existing .NET installation.
install_prereqs() {
    local distro_name="$1"
    local distro_ver="$2"
    local ms_repo="${3:-false}"
    local ms_repo_url="https://packages.microsoft.com/config"
    local ms_repo_pkg="packages-microsoft-prod.deb"

    # TODO: Add a check for if microsoft's version of .NET is already installed.
    if [[ $ms_repo == true ]]; then
        echo "${E_NOTE}Requires .NET from Microsoft's repository"

        echo "${E_INFO}Adding Microsoft's package signing key..."
        (   ## A.1.
            curl -O "$ms_repo_url/$distro_name/$distro_ver/$ms_repo_pkg" || exit 1
            sudo dpkg -i "$ms_repo_pkg" || exit 1
        ) &
        apt_pid=$!
        wait $apt_pid || E_STDERR "Failed to add Microsoft's package signing key" $?
        unset apt_pid
        rm -f "$ms_repo_pkg"

        echo "${E_INFO}Uninstalling existing .NET installation..."
        ( sudo apt remove -y "$C_DOTNET_PKG" && sudo apt autoremove -y ) &  ## A.1.
        apt_pid=$!
        wait $apt_pid \
            || E_STDERR "Failed to uninstall existing .NET installation" $?
        unset apt_pid
    fi

    (   ## A.1.
        echo "${E_INFO}Installing .NET Core..."
        sudo apt update && sudo apt install -y "$C_DOTNET_PKG" || exit $?

        echo "${E_INFO}Installing music prerequisites..."
        sudo apt install -y "${C_MUSIC_PREREQS[@]}" || exit $?

        install_yt_dlp

        echo "${E_INFO}Installing other prerequisites..."
        sudo apt install -y "${C_OTHER_PREREQS[@]}" || exit $?

    ) &
    apt_pid=$!
    wait $apt_pid || E_STDERR "Failed to install all prerequisites" $?
    unset apt_pid

    echo -e "\n${E_SUCCESS}Finished installing prerequisites"
    clean_exit 0 "true"
}

####
# Display a message indicating that the installer does not support the current OS.
#
# EXITS:
#   - 4: The installer does not support the current OS.
unsupported() {
    echo "${E_ERROR}The installer does not support the automatic installation and" \
        "setup of NadekoBot's prerequisites for your OS: $E_DISTRO $E_VER $E_ARCH" >&2
    read -rp "${E_NOTE}Press [Enter] to return to the main menu"
    exit 4
}


####[ Trapping Logic ]##################################################################


trap 'clean_exit "129"' SIGHUP
trap 'clean_exit "130"' SIGINT
trap 'clean_exit "143"' SIGTERM
trap 'clean_exit "$?"'  EXIT


####[ Main ]############################################################################


printf "%sWe will now install NadekoBot's prerequisites. " "$E_NOTE"
read -rp "Press [Enter] to continue."

if [[ $E_DISTRO == "ubuntu" ]]; then
    case "$E_VER" in
        24.04) install_prereqs "ubuntu" "$E_VER" ;;
        22.04) install_prereqs "ubuntu" "$E_VER" ;;
        *) unsupported ;;
    esac
elif [[ $E_DISTRO == "debian" ]]; then
    case "$E_SVER" in
        12) install_prereqs "debian" "$E_SVER" "true" ;;
        11) install_prereqs "debian" "$E_SVER" "true" ;;
        *) unsupported ;;
    esac
elif [[ $E_DISTRO == "linuxmint" ]]; then
    case "$E_SVER" in
        22) install_prereqs "ubuntu" "22.04" ;;
        21) install_prereqs "ubuntu" "22.04" ;;
        *) unsupported ;;
    esac
fi
