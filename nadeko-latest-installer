#!/bin/bash
#
# This script downloads and updates NadekoBot to the latest version.
#
# NOTE:
#   Regarding how I manage reverting changes, I've decided to use a step-based approach
#   compared to the state-based approach used in 'file-backup'. This is because the
#   potential ambiguity when dealing with multiple files or directories that may or may
#   not exist, has posed a logical challenge for me. I believe that using a step-based
#   approach will make it easier to manage the script's logic.
#
# Comment Key:
#   - A.1.: To prevent permission errors that can occur, especially when the installer
#       is run with root privileges and later as a non-root user, it's necessary to
#       ensure that '/tmp/NuGetScratch' and '/home/$USER/.nuget' are owned by the user
#       currently running the installer.
#
########################################################################################
####[ Variables ]#######################################################################


export DOTNET_CLI_TELEMETRY_OPTOUT=1  # Used when compiling code.

C_NADEKOBOT_TMP=$(mktemp -d -p /tmp nadekobot.XXXXXXXXXX)
readonly C_NADEKOBOT_TMP

readonly C_NADEKOBOT_URL="https://gitlab.com/Kwoth/nadekobot"
readonly C_EXAMPLE_CREDS="$C_NADEKOBOT_TMP/nadekobot/src/NadekoBot/creds_example.yml"
readonly C_CURRENT_CREDS="nadekobot/output/creds.yml"
readonly C_NEW_CREDS="$C_NADEKOBOT_TMP/nadekobot/output/creds.yml"
readonly C_CURRENT_DATABASE="nadekobot/output/data/NadekoBot.db"
readonly C_NEW_DATABASE="$C_NADEKOBOT_TMP/nadekobot/output/data/NadekoBot.db"
readonly C_CURRENT_DATA="nadekobot/output/data"
readonly C_NEW_DATA="$C_NADEKOBOT_TMP/nadekobot/output/data"

service_is_active=false


####[ Functions ]#######################################################################


####
# Clean up and exit the script.
#
# PARAMETERS:
#   - $1: exit_code (Required)
#   - $2: use_extra_newline (Optional, Default: false)
#       - Whether to output an extra blank line, to separate the previous output from
#         the output of this function.
#       - Acceptable values:
#           - true
#           - false
clean_exit() {
    local exit_code="$1"
    local use_extra_newline="${2:-false}"
    local cleanup=true

    # Unset the local traps to restore traps set in 'installer-prep'.
    trap - EXIT SIGINT SIGTERM SIGHUP SIGQUIT

    [[ $use_extra_newline == true ]] && echo ""

    ## We modify the exit code to 3, because 'nadeko-main-installer' will not exit if
    ## if the exit code is 3. This exit code is used to indicate that the script exited
    ## due an error, but the main installer should continue.
    case "$exit_code" in
        0)
            cleanup=false
            ;;
        1)
            exit_code=3
            ;;
        130)
            echo -e "\n${E_WARNING}User interrupt detected (SIGINT)"
            exit_code=3
            ;;
        143)
            echo -e "\n${E_WARNING}Termination signal detected (SIGTERM)"
            exit_code=3
            ;;
        129)
            echo -e "\n${E_WARNING}Hangup signal detected (SIGHUP)"
            exit_code=3
            ;;
        131)
            echo -e "\n${E_WARNING}Quit signal detected (SIGQUIT)"
            exit_code=3
            ;;
        *)
            echo -e "\n${E_WARNING}Exiting with code: $exit_code"
            ;;
    esac

    ## This block will only run if the script attempts to exit prematurely (i.e., an
    ## error occurred).
    if [[ $cleanup == true ]]; then
        echo "${E_INFO}Cleaning up..."

        # Remove temporary directory if it exists
        rm -rf "$C_NADEKOBOT_TMP" 2>/dev/null

        # If 'nadekobot' is missing but 'nadekobot.old' exists, restore it
        if [[ ! -d "nadekobot" && -d "nadekobot.old" ]]; then
            echo "${E_WARNING}NadekoBot is in an inconsistent state"
            echo "${E_INFO}Attempting to restore 'nadekobot'..."
            mv nadekobot.old nadekobot || E_STDERR "Failed to restore 'nadekobot'" "1"

            # If 'nadekobot.old.old' exists, move it back to 'nadekobot.old'
            if [[ -d "nadekobot.old.old" ]]; then
                mv nadekobot.old.old nadekobot.old || E_STDERR "Failed to restore 'nadekobot.old'" "1"
            fi
        fi
    fi

    read -rp "${E_NOTE}Press [Enter] to return to the main menu"
    exit "$exit_code"
}


####[ Trapping Logic ]##################################################################


trap 'clean_exit "130" "true"' SIGINT
trap 'clean_exit "143" "true"' SIGTERM
trap 'clean_exit "129" "true"' SIGHUP
trap 'clean_exit "131" "true"' SIGQUIT
trap 'clean_exit "$?" "true"'  EXIT


####[ Main ]############################################################################


read -rp "${E_NOTE}We will now download/update NadekoBot. Press [Enter] to begin."

###
### [ Stop Service ]
###

if [[ $E_SERVICE_STATUS == "active" ]]; then
    service_is_active=true
    E_STOP_SERVICE
fi

###
### [ Create Backup and Update ]
###

cd "$C_NADEKOBOT_TMP" || E_STDERR "Failed to change working directory" "1"

echo "${E_INFO}Downloading NadekoBot into '$C_NADEKOBOT_TMP'..."
git clone -b "$E_BOT_INSTALL_VERSION" --recursive --depth 1 "$C_NADEKOBOT_URL" \
    || E_STDERR "Failed to download NadekoBot" "1"

## A.1.
if [[ -d /tmp/NuGetScratch ]]; then
    echo "${E_INFO}Modifying ownership of '/tmp/NuGetScratch'..."
    sudo chown -R "$USER":"$USER" /tmp/NuGetScratch \
        || E_STDERR "Failed to to modify the ownership of '/tmp/NuGetScratch'" "1"
fi

## A.1.
## Commented out because I don't believe it's necessary. But I'm leaving it here for
## for now until I'm 100% sure it's not needed.
#if [[ -d  /home/$USER/.nuget ]]; then
#    echo "${E_INFO}Modifying ownership of '/home/$USER/.nuget'..."
#    sudo chown -R "$USER":"$USER" /home/"$USER"/.nuget \
#        || E_STDERR "Failed to to modify the ownership of '/home/$USER/.nuget'..." "1"
#fi

if [[ $E_COMPILE_NADEKOBOT == true ]]; then
    echo "${E_INFO}Building NadekoBot..."
    cd nadekobot || E_STDERR "Failed to change directory to 'nadekobot'" "1"
    dotnet restore -f --no-cache || E_STDERR "Failed to restore .NET packages" "1"
    dotnet build src/NadekoBot/NadekoBot.csproj -c Release -o output/ \
        || E_STDERR "Failed to build NadekoBot" "1"
    cd "$E_WORKING_DIR" || E_STDERR "Failed to change directory to '$E_WORKING_DIR'" "1"
else
    echo "${E_NOTE}'$E_COMPILE_NADEKOBOT' is set to false"
    echo "${E_NOTE}Skipping the compilation of NadekoBot..."
fi

###
### [ Move Credentials, Database, and Other Data ]
###
### Move credentials, database, and other data to the new version of NadekoBot.
###

(
    if [[ ! -f $C_CURRENT_CREDS ]]; then
        echo "${E_WARNING}'$C_CURRENT_CREDS' could not be found"
        echo "${E_INFO}Copying '${C_EXAMPLE_CREDS##*/}' as '${C_NEW_CREDS##*/}'" \
            "to '${C_NEW_CREDS%/*}'..."
        cp -f "$C_EXAMPLE_CREDS" "$C_NEW_CREDS" || exit 1
    else
        echo "${E_INFO}Copying '${C_NEW_CREDS##*/}' to '${C_NEW_CREDS%/*}'..."
        cp -f "$C_CURRENT_CREDS" "$C_NEW_CREDS" || exit 1
    fi
) || E_STDERR "Failed to copy credentials" "1"


if [[ -d nadekobot ]]; then
    if [[ ! -f $C_CURRENT_DATABASE ]]; then
        echo "${E_WARNING}'$C_CURRENT_DATABASE' could not be found"
        echo "${E_NOTE}Skipping copying the database..."
    else
        echo "${E_INFO}Copying '${C_CURRENT_DATABASE} to the '${C_NEW_DATABASE%/*}'..."
        cp -rT "$C_CURRENT_DATABASE" "$C_NEW_DATABASE" \
            || E_STDERR "Failed to copy database" "1"
    fi

    echo "${E_INFO}Copying other data to the new version..."

    ### The end-user will have to manually re-add their strings after each update as
    ### updates may cause a number of strings to become obsolete, changed, etc.
    ### However, old user's strings will be backed up as strings_old.

    ## Prevent overwriting the new strings directory and aliases.yml file, by renaming
    ## them.
    mv -fT "$C_NEW_DATA"/strings "$C_NEW_DATA"/strings_new
    mv -f "$C_NEW_DATA"/aliases.yml "$C_NEW_DATA"/aliases_new.yml

    # Copy current data directory to new data directory. This will overwrite any file or
    # directory that exists in the new data directory, with the same name.
    cp -rT "$C_CURRENT_DATA" "$C_NEW_DATA"

    # Remove old strings and aliases.
    rm -rf "$C_NEW_DATA"/strings_old "$C_NEW_DATA"/aliases_old.yml 2>/dev/null
    ## Back up old strings and aliases.
    mv -fT "$C_NEW_DATA"/strings "$C_NEW_DATA"/strings_old
    mv -f "$C_NEW_DATA"/aliases.yml "$C_NEW_DATA"/aliases_old.yml

    ## Restore new strings and aliases.
    mv -fT "$C_NEW_DATA"/strings_new "$C_NEW_DATA"/strings
    mv -f "$C_NEW_DATA"/aliases_new.yml "$C_NEW_DATA"/aliases.yml

    echo "${E_INFO}Replacing 'nadekobot' with '${C_NADEKOBOT_TMP}/nadekobot'..."
    ## Ensures a smooth transition between versions. In the case of an error, it'll be
    ## easier to revert to the previous version.
    (
        echo "1/5" && sleep 10
        if [[ -d nadekobot.old ]]; then
            mv nadekobot.old nadekobot.old.old || exit 1
        fi

        echo "2/5" && sleep 10
        mv nadekobot nadekobot.old || exit 1

        echo "3/5" && sleep 10
        mv "$C_NADEKOBOT_TMP"/nadekobot nadekobot || exit 1

        echo "4/5" && sleep 10
        if [[ -d nadekobot.old.old ]]; then
            rm -rf nadekobot.old.old || exit 1
        fi

        echo "5/5" && sleep 10
    ) || E_STDERR "Failed to replace 'nadekobot' with the new version" "1"
else
    echo "${C_INFO}Moving '$C_NADEKOBOT_TMP/nadekobot' to 'nadekobot'..."
    mv "$C_NADEKOBOT_TMP"/nadekobot . \
        || E_STDERR "Failed to move '${C_NADEKOBOT_TMP}' to 'nadekobot'" "1"
    rmdir "$C_NADEKOBOT_TMP" &>/dev/null
fi

###
### [ Clean Up and Present Results ]
###

echo ""
echo "${E_SUCCESS}Finished downloading/updating NadekoBot"

if [[ $service_is_active == true ]]; then
    echo "${E_NOTE}'$E_SERVICE_NAME' was stopped to update NadekoBot and needs to be" \
        "started using one of the run modes in the installer menu"
fi

clean_exit 0
