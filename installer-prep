#!/bin/bash
#
# This script checks the operating system, architecture, bit type, and other factors to
# determine if the system is compatible with NadekoBot. If the system is supported, it
# will download and execute the main installer.
#
########################################################################################
####[ Exported and Global Variables ]###################################################


# Refer to the 'README' note at the beginning of 'linuxAIO' for more information.
readonly C_CURRENT_LINUXAIO_REVISION=39
readonly C_MAIN_INSTALLER="nadeko-main-installer"

## Modify output text color.
E_YELLOW="$(printf '\033[1;33m')"
E_GREEN="$(printf '\033[0;32m')"
C_BLUE="$(printf '\033[0;34m')"
E_CYAN="$(printf '\033[0;36m')"
E_RED="$(printf '\033[1;31m')"
E_NC="$(printf '\033[0m')"
E_GREY="$(printf '\033[0;90m')"
E_CLRLN="$(printf '\r\033[K')"
export E_YELLOW E_GREEN E_CYAN E_ERROR E_NC E_GREY E_CLRLN

## Short-hand colorized messages.
E_SUCCESS="${E_GREEN}==>${E_NC} "
E_WARNING="${E_YELLOW}==>${E_NC} "
E_ERROR="${E_RED}ERROR:${E_NC} "
E_INFO="${E_BLUE}==>${E_NC} "
E_NOTE="${E_CYAN}==>${E_NC} "
export E_SUCCESS E_WARNING E_ERROR E_INFO E_NOTE


####[ Functions ]#######################################################################


####
# Identify the operating system, version number, architecture, bit type (32 or 64), etc.
detect_sys_info() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        E_DISTRO="$ID"
        E_VER="$VERSION_ID"  # Version: x.x.x...
        E_SVER=${E_VER//.*/}  # Version: x
        pname="$PRETTY_NAME"
    else
        E_DISTRO=$(uname -s)
        E_VER=$(uname -r)
    fi

    case $(uname -m) in
        x86_64) bits="64"; E_ARCH="x64" ;;
        i*86)   bits="32"; E_ARCH="x86" ;;
        armv*)  bits="32"; E_ARCH="?" ;;
        *)      bits="?";  E_ARCH="?" ;;
    esac
}

####
# Download the latest version of 'linuxAIO' if $E_LINUXAIO_REVISION and
# $C_CURRENT_LINUXAIO_REVISION aren't of equal value.
linuxAIO_update() {
    echo "${E_WARNING}You are using an older version of 'linuxAIO'"
    read -rp "${E_NOTE}Press [Enter] to download the latest version"
    echo "${E_INFO}Downloading latest version of 'linuxAIO'..."

    ## Due to changes in 'linuxAIO', the existing configurations cannot be directly
    ## applied to the newest version of 'linuxAIO'. As a result, the existing
    ## configurations will not be applied to the newest version of 'linuxAIO', and the
    ## end-user will have to reconfigure 'linuxAIO' manually.
    ##
    # shellcheck disable=SC2153
    #   $_LINUXAIO_REVISION and $_RAW_URL are from revision 38 and earlier. This means
    #   that the if statement doesn't need to test for $E_LINUXAIO_REVISION.
    if ((_LINUXAIO_REVISION <= 38)); then
        if [[ -f linuxAIO.sh ]]; then
            echo "${E_INFO}Backing up 'linuxAIO.sh' as 'linuxAIO.sh.old'..."
            mv linuxAIO.sh linuxAIO.sh.old
        elif [[ -f linuxAIO ]]; then
            echo "${E_INFO}Backing up 'linuxAIO' as 'linuxAIO.old'..."
            mv linuxAIO linuxAIO.old
        fi

        curl -O "$_RAW_URL/linuxAIO" || E_STDERR "Failed to download 'linuxAIO'" "1"
        sudo chmod +x linuxAIO
        echo "${E_NOTE}NOT applying existing configurations to 'linuxAIO'"
        echo "${E_SUCCESS}Successfully downloaded the newest version of 'linuxAIO'.${E_NC}"
    ## Download the newest version of 'linuxAIO' and apply existing changes to it.
    else
        local installer_branch
        local installer_branch_found
        installer_branch=$(grep '^installer_branch=.*' linuxAIO)
        installer_branch_found="$?"
        local bot_install_version
        local bot_install_version_found
        bot_install_version=$(grep '^export E_BOT_INSTALL_VERSION=.*' linuxAIO)
        bot_install_version_found="$?"

        curl -O "$E_RAW_URL"/linuxAIO && sudo chmod +x linuxAIO
        echo "${E_INFO}Applying existing configurations to the new 'linuxAIO'..."

        [[ $installer_branch_found == 0 ]] \
            && sed -i "s/^installer_branch=.*/$installer_branch/" linuxAIO

        [[ $bot_install_version_found == 0 ]] \
            && sed -i "s/^export E_BOT_INSTALL_VERSION=.*/$bot_install_version/" linuxAIO

        echo "${E_SUCCESS}Successfully downloaded the newest version of 'linuxAIO' and" \
            "applied existing changes"
    fi

    clean_up "0" "Exiting" "true"
}

####
# Provide the end-user with the option to continue, even if their system isn't
# officially supported.
unsupported() {
    echo "${E_ERROR}Your operating system is not OFFICIALLY supported for the" \
        "installation, setup, and/or use of NadekoBot" >&2
    echo "${E_WARNING}${E_YELLOW}WARNING${E_NC}: By continuing, you accept that" \
        "unexpected behaviors may occur. If you run into any errors or problems with" \
        "the installation and use of the NadekoBot, you are on your own."
    read -rp "${E_INFO}Would you like to continue anyways? [y/N] " choice

    choice=${choice,,}
    case "$choice" in
        y|yes)
            clear -x
            execute_main_installer
            ;;
        *)
            clean_up "0" "Exiting"
            ;;
    esac
}

####
# Cleanly exit the installer by removing files that aren't required unless the installer
# is currently running.
#
# PARAMETERS:
#   - $1: exit_code (Required)
#       Exit code.
#   - $2: output_text (Required)
#       Output text.
#   - $3: clean_up_text (Optional, Default: false)
#       True if 'Cleaning up...' should be printed with two new-line symbols.
clean_up() {
    local exit_code="$1"
    local output_text="$2"
    local clean_up_text="${3:-false}"

    # Files to be removed.
    local installer_files=("installer-prep" "file-backup" "prereqs-installer"
        "nadeko-latest-installer" "nadeko-runner" "nadeko-main-installer")

    if [[ $clean_up_text == true ]]; then
        echo -e "\n\n${E_INFO}Cleaning up..."
    else
        echo -e "\n${E_INFO}Cleaning up..."
    fi

    cd "$E_WORKING_DIR" || E_STDERR "Failed to move to NadekoBot's root directory" "1"
    [[ -d nadekobot_tmp ]] && rm -rf nadekobot_tmp

    for file in "${installer_files[@]}"; do
        [[ -f $file ]] && rm "$file"
    done

    echo "${E_INFO}$output_text..."
    exit "$exit_code"
}

####
# Download and execute $C_MAIN_INSTALLER.
execute_main_installer() {
    E_DOWNLOAD_SCRIPT "$C_MAIN_INSTALLER" "true"
    ./"$C_MAIN_INSTALLER"
    clean_up "$?" "Exiting"
}

###
### [ Functions To Be Exported ]
###

####
# Download the specified script and modify it's execution permissions.
#
# PARAMETERS:
#   - $1: script_name (Required)
#       Name of the script to download.
#   - $2: script_output (Optional, Default: false)
#       True if the script should output text indicating $1 is being downloaded.
E_DOWNLOAD_SCRIPT() {
    local script_name="$1"
    local script_output="${2:-false}"

    [[ $script_output == true ]] && printf "${E_INFO}Downloading '%s'..." "$script_name"

    curl -O -s "$E_RAW_URL"/"$script_name"
    sudo chmod +x "$script_name"
}

####
# Output an error message, and if desired, exit the script.
#
# PARAMETERS:
#   - $1: error_message (Required)
#       Error message.
#   - $2: exit_code (Optional)
#       If provided, exit with the provided value.
#   - $3: additional_message (Optional)
#       If provided, output an additional message.
E_STDERR() {
    local error_message="$1"
    local exit_code="${2:-}"
    local additional_message="${3:-}"

    echo "${E_ERROR}$error_message" >&2
    [[ $additional_message ]] && echo -e "$additional_message" >&2
    [[ $exit_code ]] && exit "$exit_code"
}


####[ Error Traps ]#####################################################################


# TODO: Update with better trapping...
trap 'clean_up "130" "Exiting" "true"' SIGINT
trap 'clean_up "143" "Exiting" "true"' SIGTERM
trap 'clean_up "148" "Exiting" "true"' SIGTSTP


####[ Prepping ]########################################################################


if [[ $E_LINUXAIO_REVISION != "$C_CURRENT_LINUXAIO_REVISION" ]]; then
    # NOTE: Script will exit after updating 'linuxAIO'.
    linuxAIO_update
fi

# Change the working directory to the location of the executed script.
cd "${0%/*}" || {
    echo "${E_ERROR}Failed to change working directory" >&2
    echo "${E_NOTE}Change your working directory to that of the executed script"
    clean_up "1" "Exiting"
}

export E_WORKING_DIR="$PWD"
export E_INSTALLER_PREP="$E_WORKING_DIR/installer-prep"


####[ Main ]############################################################################


clear -x

detect_sys_info
export E_DISTRO E_SVER E_VER E_ARCH
export -f E_DOWNLOAD_SCRIPT E_STDERR

# Use $E_DISTRO if $pname is unset or null...
echo "SYSTEM INFO
Bit Type: $bits
Architecture: $E_ARCH
Distro: ${pname:=$E_DISTRO}
Distro Version: $E_VER
"

### Check if the operating system is supported by NadekoBot and the installer.
if [[ $bits == 64 ]]; then
    if [[ $E_DISTRO == "ubuntu" ]]; then
        case "$E_VER" in
            22.04|20.04|18.04) execute_main_installer ;;
            *)                 unsupported ;;
        esac
    elif [[ $E_DISTRO == "debian" ]]; then
        case "$E_SVER" in
            11|10) execute_main_installer ;;
            *)     unsupported ;;
        esac
    elif [[ $E_DISTRO == "linuxmint" ]]; then
        case "$E_SVER" in
            21|20) execute_main_installer ;;
            *)     unsupported ;;
        esac
    else
        unsupported
    fi
else
    unsupported
fi
