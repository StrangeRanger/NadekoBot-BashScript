#!/bin/bash
#
# Start NadekoBot in one of two ways:
#   - NadekoRun: Run NadekoBot in the background.
#   - NadekoRunAR: Run NadekoBot in the background with auto restart.
#
# Comment key:
#   - A.1.: Used in conjunction with 'systemctl'.
#   - B.1.: Used in the text output.
#
########################################################################################
####[ Global Variables ]################################################################


## Indicate which actions to be performed on NadekoBot's service.
if [[ $E_CODENAME == "NadekoRun" ]]; then
    readonly C_LOWER="disable"    # A.1.
    readonly C_UPPER="Disabling"  # B.1.
else
    readonly C_LOWER="enable"    # A.1.
    readonly C_UPPER="Enabling"  # B.1.
fi

## NOTE:
##  'StandardOutput' and 'StandardError' no longer supports 'syslog' starting in
##  version 246 of systemd.
if [[ $(systemctl --version | awk 'NR==1 {print $2}') -ge 246 ]]; then
    readonly C_SERVICE_CONTENT="[Unit]
Description=NadekoBot service
After=network.target
StartLimitIntervalSec=60
StartLimitBurst=2

[Service]
Type=simple
User=$USER
WorkingDirectory=$E_ROOT_DIR
ExecStart=/bin/bash NadekoRun
Restart=on-failure
RestartSec=5
StandardOutput=journal
StandardError=journal
SyslogIdentifier=NadekoBot

[Install]
WantedBy=multi-user.target"
else
    readonly C_SERVICE_CONTENT="[Unit]
Description=NadekoBot service
After=network.target
StartLimitIntervalSec=60
StartLimitBurst=2

[Service]
Type=simple
User=$USER
WorkingDirectory=$E_ROOT_DIR
ExecStart=/bin/bash NadekoRun
Restart=on-failure
RestartSec=5
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=NadekoBot

[Install]
WantedBy=multi-user.target"
fi


####[ Functions ]#######################################################################


####
# Clean up and exit the script.
#
# PARAMETERS:
#   - $1: exit_code (Required)
#   - $2: use_extra_newline (Optional, Default: false)
#       - Whether to output an extra blank line, to separate the previous output from
#         the output of this function.
#       - Acceptable values:
#           - true
#           - false
clean_exit() {
    local exit_code="$1"
    local use_extra_newline="${2:-false}"
    local exit_now=false

    trap - EXIT SIGINT SIGTERM SIGHUP
    [[ $use_extra_newline == true ]] && echo ""

    ## The exit code may be modified to 50, when 'nadeko-latest-installer' should
    ## continue running, even if an error occurred. Please refer to the
    ## 'exit_code_actions' function in 'nadeko-latest-installer' for more information.
    case "$exit_code" in
        1)   exit_code=50 ;;
        0|3) ;;
        129)
            echo -e "\n${E_WARNING}Hangup signal detected (SIGHUP)"
            exit_now=true
            ;;
        130)
            echo -e "\n${E_WARNING}User interrupt detected (SIGINT)"
            exit_code=50
            ;;
        143)
            echo -e "\n${E_WARNING}Termination signal detected (SIGTERM)"
            exit_now=true
            ;;
        *)
            echo -e "\n${E_WARNING}Exiting with exit code: $exit_code"
            exit_now=true
            ;;
    esac

    if [[ $exit_now == false ]]; then
        read -rp "${E_NOTE}Press [Enter] to return to the main menu"
    fi

    exit "$exit_code"
}


####[ Trapping Logic ]##################################################################


trap 'clean_exit "129" "true"' SIGHUP
trap 'clean_exit "130" "true"' SIGINT
trap 'clean_exit "143" "true"' SIGTERM
trap 'clean_exit "$?" "true"'  EXIT



####[ Main ]############################################################################


if [[ -f $E_SERVICE ]]; then
    echo "${E_INFO}Updating '$E_SERVICE_NAME'..."
else
    echo "${E_INFO}Creating '$E_SERVICE_NAME'..."
fi

{
    echo "$C_SERVICE_CONTENT" | sudo tee "$E_SERVICE" &>/dev/null \
        && sudo systemctl daemon-reload
} || {
    echo "${E_ERROR}Failed to create '$E_SERVICE_NAME'" >&2
    echo "${E_NOTE}This service must exist for NadekoBot to work$"
    read -rp "Press [Enter] to return to the installer menu"
    exit 3
}

## Disable/enable the service.
echo "$C_UPPER '$E_SERVICE_NAME'..."
sudo systemctl "$C_LOWER" "$E_SERVICE_NAME" || {
    echo "${E_ERROR}Failed to $C_LOWER '$E_SERVICE_NAME'" >&2
    echo "${E_NOTE}This service must be ${C_LOWER}d in order to use this run mode"
    read -rp "Press [Enter] to return to the installer menu"
    exit 3
}

if [[ -f NadekoRun ]]; then
    echo "${E_INFO}Updating 'NadekoRun'..."
else
    echo "${E_INFO}Creating 'NadekoRun'..."
    touch NadekoRun
    sudo chmod +x NadekoRun
fi

## Add the code required to run NadekoBot in the background, to 'NadekoRun'.
if [[ $E_CODENAME == "NadekoRun" ]]; then
    echo "#!/bin/bash

_code_name_=\"NadekoRun\"

echo \"Running NadekoBot in the background\"
youtube-dl -U

echo \"Starting NadekoBot...\"
cd $E_ROOT_DIR/nadekobot/output
dotnet NadekoBot.dll || {
    echo \"An error occurred when trying to start NadekoBot\"
    echo \"Exiting...\"
    exit 1
}

echo \"Stopping NadekoBot...\"
cd $E_ROOT_DIR" > NadekoRun
## Add code required to run NadekoBot in the background with auto restart, to
## 'NadekoRun'.
else
    echo "#!/bin/bash

_code_name_=\"NadekoRunAR\"

echo \"Running NadekoBot in the background with auto restart\"
youtube-dl -U

echo \"Starting NadekoBot...\"

while true; do
    if [[ -d $E_ROOT_DIR/nadekobot/output ]]; then
        cd $E_ROOT_DIR/nadekobot/output || {
            echo \"Failed to change working directory to '$E_ROOT_DIR/nadekobot/output'\" >&2
            echo \"Ensure that the working directory inside of '/etc/systemd/system/nadeko.service' is correct\"
            echo \"Exiting...\"
            exit 1
        }
    else
        echo \"'$E_ROOT_DIR/nadekobot/output' doesn't exist\"
        exit 1
    fi

    dotnet NadekoBot.dll || {
        echo \"An error occurred when trying to start NadekoBot\"
        echo \"Exiting...\"
        exit 1
    }

    echo \"Waiting for 5 seconds...\"
    sleep 5
    youtube-dl -U
    echo \"Restarting NadekoBot...\"
done

echo \"Stopping NadekoBot...\"" > NadekoRun
fi

if [[ $E_SERVICE_STATUS == "active" ]]; then
    echo "Restarting '$E_SERVICE_NAME'..."
    sudo systemctl restart "$E_SERVICE_NAME" || {
        echo "${E_ERROR}Failed to restart '$E_SERVICE_NAME'${E_NC}" >&2
        read -rp "Press [Enter] to return to the installer menu"
        exit 3
    }
else
    echo "Starting '$E_SERVICE_NAME'..."
    sudo systemctl start "$E_SERVICE_NAME" || {
        echo "${E_ERROR}Failed to start '$E_SERVICE_NAME'${E_NC}" >&2
        read -rp "Press [Enter] to return to the installer menu"
        exit 3
    }
fi

E_WATCH_SERVICE_LOGS "runner"
